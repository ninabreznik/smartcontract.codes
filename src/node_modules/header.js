const bel = require('bel')
const csjs = require('csjs-inject')
const icon = require('icon')
const svg = require('./svg.json')
const search = require('search')
const makeCollectionArea = require('makeCollectionArea')
const themeSwitcher = require('themeSwitcher')
const getCurrentPage = require('getCurrentPage')
const makePagination = require('pagination')

module.exports = header

function header (db, notify) {
  let activeSession
  let count
  db.getPagesCount((err, res) => {
    count = res //@TODO get count to makePagination
  })

  function listenPagination (message) {
    const { type, data } = message
    if (type === 'paginate') return notify(message) 
  }

  return bel`<header class="${css.header}">
    <div class="${css.logo}" onclick=${home}>
      <img src="src/assets/images/logo-1.png" alt="smartcontract.codes">
    </div>
    ${search(action => {
        if (action.type === 'search') {
          const query = action.body
          const searchSession = { query, results: [], cards: 0 }
          if (activeSession) db.cancel(activeSession.id)
          searchSession.id = db.search( (query, action) => {
            listenSearch(searchSession, action)
          })
          activeSession = searchSession
        }
      })
    }
    <button class="${css.button} ${css.default} ${css.hamburger}" onclick=${() => menuOpen()}>
      <span class=${css['icon-hamburger']}>${icon('hamburger', svg.hamburger)}</span>
    </button>
    <nav class="${css.nav}">
      ${makePagination({ count: 500 }, listenPagination)}
      ${themeSwitcher(notify)}
      <a href="#">
        <span class="${css.avatar}">
          <img src="src/assets/images/user-avatar.jpg" alt="User Avatar">
        </span>
      </a>
      <button class="${css.button} ${css.default}">
        <span class=${css['apps']}>
          ${icon('apps', svg.apps)}
        </span>
      </button>
    </nav>
  </header>`
}
function home () {
  location.href = `${window.location.origin}${window.location.pathname}`
}

function menuOpen() {
  return
  const nav = document.querySelector(`.${css.nav}`)
  nav.style.display = 'block'
}
const css = csjs`
.header {
  display: grid;
  grid-template-rows: auto;
  grid-template-columns: 62px 1fr auto;
  padding: 10px 12px;
  background-color: var(--header-background);
  position: fixed;
  top: 0;
  left: 0;
  z-index: 99;
  width: calc(100% - 24px);
}
.logo {
  width: 62px;
}
.logo:hover {
  cursor: pointer;
}
.nav {
  display: grid;
  grid-template: 1fr / repeat(5, auto);
  grid-gap: 8px;
  justify-content: end;
  align-items: center;
}
.avatar {
  display: inline-block;
  width: 45px;
  height: 45px;
  border-radius: 100px;
  background-color: #333;
  overflow: hidden;
  margin-left: 15px;
}
.button {
  font-size: var(--button-default-font-size);
  vertical-align: middle;
  width: 36px;
  height: 36px;
}
.default {
  padding: 6px;
  color: var(--button-default-text);
  background-color: transparent;
  box-shadow: none;
  border: none;
  transition: background-color .3s ease-in-out;
  -webkit-transition: background-color .3s ease-in-out;
  -moz-transition: background-color .3s ease-in-out;
  -o-transition: background-color .3s ease-in-out;
}
.default:hover {
  background-color: var(--button-default-hover);
  color:  var(--button-default-text-hover);
  cursor: pointer;
}
.button span {
  display: inline-block;
  vertical-align: text-top;
}
.button span svg g {
  fill: var(--button-icon-fill);
  transition: fill .3s ease-in-out;
  -webkit-transition: fill .3s ease-in-out;
  -moz-transition: fill .3s ease-in-out;
  -o-transition: fill .3s ease-in-out;
}
.apps {
}
.icon-arrow-left,  .icon-arrow-right {
}
.hamburger {
  display: none;
}
.icon-hamburger {

}
@media (max-width: 960px) {
  .header {
    grid-template-columns: 62px 1fr auto;
    padding: 10px 2% 14px 2%;
    width: calc(100% - 4%);
  }
}
@media (max-width: 768px) {
  .nav {
    display: none;
  }
  .hamburger {
    display: none;
    align-self: center;
  }
}
`
