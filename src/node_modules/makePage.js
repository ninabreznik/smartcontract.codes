const bel = require('bel')
const csjs = require('csjs-inject')
const header = require('header')
const search = require('search')
const loading = require('loading')()
const makePagination = require('pagination')
const makeCollectionArea = require('makeCollectionArea')
const makeCard = require('makeCard')
const filterButtons = require('filters')
const notification = require('notification')
const getCurrentPage = require('getCurrentPage')
const footerSticker = require('footerSticker')()
const footer = require('footer')()
const searchGuide = require('searchGuide')

module.exports = makePage

function makePage (data, notify) {
  const { db, themes,cardsCount } = data
  let activeSession
  const status = bel`<div></div>`
  const collectionContainer = bel`<div class=${css.container}></div>`
  // const navigation = bel`<div></div>`
  const viewport = bel`<meta name="viewport" content="width=device-width, initial-scale=1.0">`
  document.head.appendChild(viewport)
  const names = ['All', 'Basic', 'OpenZeppelin', 'Audited', 'Newest', 'Popular', 'Featured']
  // const element = bel`<div class=${css.wrapper}>
  //     ${header()}
  //     <div class=${css.content}>
  //       ${themeSwitch()}
  //       ${status}
  //       ${search(action => {
  //         if (action.type === 'search') {
  //           const query = action.body
  //           console.log(`Starting search query: ${query}`)
  //           const searchSession = { query, results: [], cards: 0 }
  //           if (activeSession) db.cancel(activeSession.id)
  //           searchSession.id = db.search(query, action => {
  //             listenSearch(searchSession, action)
  //           })
  //           activeSession = searchSession
  //         }
  //       })}
  //       ${filterButtons(names, handleFilters)}
  //       ${collectionContainer}
  //       ${navigation}
  //     </div>
  // </div>`

  const element = bel`
    <div class=${css.wrapper}>
        ${header(db, message => {
          let { type, data } = message
          if (type === 'theme') return notify(message)
          if (type = 'paginate') return listenPagination(data)
        })}
        <div class=${css.content}>
          ${searchGuide()}
          ${status}
          ${collectionContainer}
        </div>
        ${footerSticker}
        ${footer}
    </div>`

  function handleFilters (action) {
    if (action.type === 'filters') {
      const filter = action.body
      if (filter === 'All') {
        const query = ''
        console.log(`Starting search query: ${query}`)
        const searchSession = { query, results: [], cards: 0 }
        if (activeSession) db.cancel(activeSession.id)
        searchSession.id = db.search(query, action => {
          listenSearch(searchSession, action)
        })
        activeSession = searchSession
      } else {
        db.getSamples(filter, (err, sampleContracts) => {
          const contracts = sampleContracts[filter]
          collectionContainer.appendChild(loading)
          updatePagination(1)
          updateCollectionArea(contracts)
        })
      }
    }
  }

  function getBatch (currentPage) {
    db.getBatch(currentPage, cardsCount, (err, contracts) => {
      if (err) return console.error(err)
      else {
        if (activeSession) return
        collectionContainer.innerHTML = ''
        collectionContainer.appendChild(loading)
        updateCollectionArea(contracts)
      }
    })
  }
  getBatch(1)

  function getStream () {
    handleFilters({ type: 'filters', body: 'Basic' })
    console.log(`Initializing the P2P database`)
    setTimeout(() => {
      notification(`First visit detected. Initializing the P2P database
        will start soon!`)
    }, 3000)
    setTimeout(() => {
      notification('Please, hold on, this might take a few minutes!')
    }, 10000)
    setTimeout(() => {
      notification(`We're getting there. Initialization only needs
      to be done once!`)
    }, 25000)
    collectionContainer.appendChild(loading)
    db.getStream((err, data) => {
      if (err) return console.error(err)
      if (activeSession) return
      if (data === 'end') {
        localStorage.init = true
        notification(`P2P database is now initialized`)
      }
      getBatch(1)
    })
  }
  return element
  function listenPagination (page) {
    getBatch(page)
  }
  function listenSearch (session, action) {
    console.log(`Starting new search session: ${session.id}`)
    console.log(`Matches found: ${session.results.length}`)
    if (action.type === 'searchResult') {
      if (action.body != 'end') {
        console.log(`New search result: ${action.body}`)
        addMatch(session, action.body)
      } else {
        if (!session.area) {
          collectionContainer.innerHTML = ''
          const el = bel`<div class=${css.noResult}>No matches found</div>`
          collectionContainer.appendChild(el)
        }
      }
    }
  }
  function updateCollectionArea (contracts) {
    const collectionArea = makeCollectionArea(contracts)
    collectionContainer.innerHTML = ''
    collectionContainer.appendChild(collectionArea)
  }
  function addMatch (session, res) {
    const contract = {
      source: res.sourceCode,
      title: res.contractName,
      hash: res.address
    }
    if (!session.area) {
      collectionContainer.innerHTML = ''
      session.area = makeCollectionArea([])
      collectionContainer.appendChild(session.area)
    }
    session.results.push(contract)
    const length = session.results.length
    const count = Math.floor(length/cardsCount)
    if (length <= cardsCount) {
      console.log(`Appending new card`)
      session.cards++
      session.area.appendChild(makeCard(contract))
    }
    if (session.cards === cardsCount) {
      console.log(`Creating fresh pagination`)
      if (!session.pagination) {
        session.pagination = true
        updatePagination(count)
      }
      if (length % cardsCount === 0) {
        updatePagination(count)
        console.log(`Updating pagination (total): ${length}`)
      }
    }
  }

  function updatePagination (count) {
    const pagination = makePagination({ count }, listenPagination)
    navigation.innerHTML = ''
    navigation.appendChild(pagination)
  }

  function clickAction() { location.url = '' }
  function closeAction() { location.url = '' }
}
const css = csjs`
  .wrapper {
    height: 100%;
  }
  .status {
    height: 100px;
  }
  .noResult {
    font-size: var(--text-large);
    text-align: center;
    margin-bottom: 60px;
    font-weight: 200;
  }
  .content {
    padding: 88px 30px 0 30px;
    min-height: calc(100% - 134px);
  }
  .container {
    position: relative;
    height: 100%;
  }
  @media (max-width: 420px) {
    .wrapper {
      padding: 0 20px;
    }
    .content {
      padding: 88px 0 0 0;
    }
  }
`
