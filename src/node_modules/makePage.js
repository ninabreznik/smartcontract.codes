const bel = require('bel')
const csjs = require('csjs-inject')

const header = require('header')
const search = require('search')
const loading = require('loading')()
const progressbar = require('progressbar')()
const makePagination = require('pagination')
const makeCollectionArea = require('makeCollectionArea')
const makeCard = require('makeCard')
const filterButtons = require('filters')
const notification = require('notification')
const getCurrentPage = require('getCurrentPage')
const Idbkv = require('idb-kv')
const store = new Idbkv('example-store')

module.exports = makePage

function makePage (data, notify) {
  const { db, themes,cardsCount } = data
  let activeSession
  const status = bel`<div></div>`
  const collectionContainer = bel`<div></div>`
  const navigation = bel`<div></div>`
  const names = ['All', 'Basic', 'OpenZeppelin', 'Audited', 'Newest', 'Popular', 'Featured']
  const element = bel`<div class=${css.wrapper}>
      ${header()}
      <div class=${css.content}>
        ${themeSwitch()}
        ${status}
        ${search(action => {
          if (action.type === 'search') {
            const query = action.body
            console.log(`Starting search query: ${query}`)
            const searchSession = { query, results: [], cards: 0 }
            if (activeSession) db.cancel(activeSession.id)
            searchSession.id = db.search(query, action => {
              listenSearch(searchSession, action)
            })
            activeSession = searchSession
          }
        })}
        ${filterButtons(names, handleFilters)}
        ${collectionContainer}
        ${navigation}
      </div>
  </div>`

  function handleFilters (action) {
    if (action.type === 'filters') {
      const filter = action.body
      if (filter === 'All') {
        const query = ''
        console.log(`Starting search query: ${query}`)
        const searchSession = { query, results: [], cards: 0 }
        if (activeSession) db.cancel(activeSession.id)
        searchSession.id = db.search(query, action => {
          listenSearch(searchSession, action)
        })
        activeSession = searchSession
      } else {
        db.getSamples(filter, (err, sampleContracts) => {
          const contracts = sampleContracts[filter]
          collectionContainer.appendChild(loading)
          updatePagination(1)
          updateCollectionArea(contracts)
        })
      }
    }
  }

  db.getPage(getCurrentPage(), (err, chunkedArr) => {
    if (err) return console.error(err)
    if (!chunkedArr) getList()
    else {
      console.log(`Retreiving paths from Indexed DB: ${chunkedArr.filepaths}`)
      if (activeSession) return
      collectionContainer.innerHTML = ''
      collectionContainer.appendChild(loading)
      db.getPagesCount((err, count) => {
        if (err) return console.error(err)
        const pagination = makePagination({ count }, listenPagination)
        const filepaths = chunkedArr.filepaths
        console.log(`Searching P2P database for files: ${filepaths}`)
        db.get(filepaths, (err, contracts) => {
          if (err) return console.error(err)
          if (activeSession) return
          updateCollectionArea(contracts)
          navigation.appendChild(pagination)
        })
      })
    }
  })

  function getList () {
    handleFilters({ type: 'filters', body: 'Basic' })
    console.log(`Initializing the P2P database`)
    setTimeout(() => {
      notification(`First visit detected. Initializing the P2P database
        will start soon!`)
    }, 3000)
    setTimeout(() => {
      notification('Please, hold on, this might take a few minutes!')
    }, 10000)
    setTimeout(() => {
      notification(`We're getting there. Initialization only needs
      to be done once!`)
    }, 25000)
    collectionContainer.appendChild(loading)
    db.list((err, filePaths) => {
      const msg = `Downloading index completed. Fetching content now!`
      notification(msg)
      if (err) return console.error(err)
      if (activeSession) return
      const page = getCurrentPage()
      db.get(filePaths.slice(page, page + cardsCount), (err, contracts) => {
        if (page === 1) return
        if (err) return console.error(err)
        if (activeSession) return
      })
      if (!localStorage.init) {
        const len = filePaths.length
        let counter = 0
        for (var i = 0; i < len; i++) {
          db.get(filePaths[i], (err, arr) => {
            if (err) return console.error(err)
            counter++
            const contract = arr[0]
            if (counter === len) {
              localStorage.init = true
              notification(`P2P database is now initialized`)
            }
          })
        }
      }
    })
  }
  return element
  function listenPagination (action) {
    if (action.type === 'paginate') {
      const page = action.body
      db.getPage(page, (err, chunkedArr) => {
        if (err) return console.error(err)
        const filepaths = chunkedArr.filepaths
        db.get(filepaths, (err, contracts) => {
          if (err) return console.error(err)
          updateCollectionArea(contracts)
        })
      })
    }
  }
  function listenSearch (session, action) {
    console.log(`Starting new search session: ${session.id}`)
    console.log(`Matches found: ${session.results.length}`)
    if (action.type === 'searchResult') {
      console.log(`New search result: ${action.body}`)
      addMatch(session, action.body)
    }
    if (action.type === 'progress') {
      const [current, total] = session.progress = action.body
      let progress = Math.floor(current / total * 100)
      if (current === 0) {
        collectionContainer.innerHTML = ''
        collectionContainer.appendChild(loading)
        navigation.innerHTML = ''
        let url = `${window.location.origin}${window.location.pathname}?page=1`
        history.pushState(null, null, url)
      } else if (current === total) {
        if (!session.area) {
          collectionContainer.innerHTML = ''
          const el = bel`<div class=${css.noResult}>No matches found</div>`
          collectionContainer.appendChild(el)
        }
      }
    }
  }
  function updateCollectionArea (contracts) {
    const collectionArea = makeCollectionArea(contracts)
    collectionContainer.innerHTML = ''
    collectionContainer.appendChild(collectionArea)
  }
  function addMatch (session, filepath) {
    console.log(`New match at: ${filepath}`)
    if (!session.area) {
      collectionContainer.innerHTML = ''
      session.area = makeCollectionArea([])
      collectionContainer.appendChild(session.area)
    }
    session.results.push(filepath)
    const length = session.results.length
    const count = Math.floor(length/cardsCount)
    if (length <= cardsCount) {
      db.get(filepath, (err, contracts) => {
        console.log(`Appending new card`)
        session.cards++
        if (err) return console.error(err)
        session.area.appendChild(makeCard(contracts[0]))
      })
    }
    if (session.cards === cardsCount) {
      console.log(`Creating fresh pagination`)
      if (!session.pagination) {
        session.pagination = true
        updatePagination(count)
      }
      if (length % cardsCount === 0) {
        updatePagination(count)
        console.log(`Updating pagination (total): ${length}`)
      }
    }
  }

  function updatePagination (count) {
    const pagination = makePagination({ count }, listenPagination)
    navigation.innerHTML = ''
    navigation.appendChild(pagination)
  }

  function clickAction() { location.url = '' }
  function closeAction() { location.url = '' }
  function themeSwitch () {
    return bel`<div class=${css.themeSwitch}>
      <span class="${css.colorplate} ${css.cubeWhite}" onclick=${() => notify({ type: 'theme', body: 'lightTheme' })}></span>
      <span class="${css.colorplate} ${css.cubeDark}" onclick=${() => notify({ type: 'theme', body: 'darkTheme' })}></span>
    </div>`
  }
}
const css = csjs`
  .wrapper {
    display: grid;
    grid-template-areas:
      "header"
      "content";
    grid-template-rows: 120px 1fr;
    grid-template-columns: 100%;
    padding: var(--wrapper-padding);
  }
  .status {
    height: 100px;
  }
  .noResult {
    font-size: var(--text-large);
    text-align: center;
    margin-bottom: 60px;
    font-weight: 200;
  }
  .content {
    grid-area: content;
    display: grid;
    grid-template-areas:
      "themeSwitch"
      "search"
      "collection"
      "pagination"
  }
  .themeSwitch {
    grid-area: themeSwitch;
    justify-self: end;
    padding-bottom: 15px;
  }
  .colorplate {
    display: inline-block;
    width: 20px;
    height: 20px;
    margin-left: 5px;
    border: 1px solid #888;
    border-radius: 6px;
    cursor: pointer;
  }
  .cubeWhite {
    background-color: #fff;
  }
  .cubeDark {
    background-color: #1D1D26;
  }
  @media (max-width: 420px) {
    .wrapper {
      padding: 0 20px;
    }
  }
`
