const bel = require('bel')
const csjs = require('csjs-inject')
const icon = require('icon')
const svg = require('svg')
const getCurrentPage = require('getCurrentPage')

module.exports = pagination

function pagination ({ count }, notify) {
  if (!count) return
  let now = getCurrentPage()
  let pagination = makePagination()
  function makePagination () {
    let input = bel`<input type="text" value=${now} class=${css.number}>`
    input.addEventListener('focusout', (e) => selectPage(e))
    input.addEventListener('keydown', (e) => detectKey(e))
    return bel`
      <div class=${css.pagination}>
        <button class="${css.button} ${css.default} ${css.previous}" onclick=${() => prev(input)}>
          <span class=${css['icon-arrow-left']}>${icon('arrow-left', svg.arrowLeft)}</span>
        </button>
        <div class=${css.pageInfo}>
          ${input} / ${count}
        </div>
        <button class="${css.button} ${css.default} ${css.next}" onclick=${() => next(input)}>
          <span class=${css['icon-arrow-right']}>${icon('arrow-left', svg.arrowRight)}</span>
        </button>
      </div>`
  }
  function detectKey (e) {
    const val = e.target.value
    var keyCode = e.keyCode || e.which
    if (keyCode == '13') gotoPage(Number(val))
  }
  function selectPage (e) {
    const val = e.target.value
    gotoPage(Number(val))
  }
  function prev (input) {
    if (now != 1) {
      input.value = now - 1
      gotoPage(now - 1)
    }
  }
  function next (input) {
    if (now != count) {
      input.value = now + 1
      gotoPage(now + 1)
    }
  }
  function gotoPage (newPage) {
    now = newPage
    if (!now) return
    const base = getCurrentPage() != 1 ?
     `${window.location.origin}${window.location.pathname}`.split('/?page=')[0]
     : `${window.location.origin}${window.location.pathname}`.split(' ')[0]
    let url = base + `?page=${newPage}`
    history.pushState(null, null, url)
    notify({ type: 'paginate', data: newPage })
  }
  return pagination
}
const css = csjs`
  .pagination {
    display: grid;
    grid-template: 1fr / 1fr auto 1fr;
    grid-gap: 5px;
    padding-right: 30px;
  }
  .button {
    font-size: var(--button-default-font-size);
    vertical-align: middle;
    width: 36px;
    height: 36px;
  }
  .pageInfo {
    font-size: 14px;
  }
  .number {
    font-size: 14px;
    text-align: center;
    border-radius: 4px;
    border: var(--number-border);
    color: var(--number-color);
    background-color: var(--number-background);
    padding: 8px 6px;
    margin-right: 5px;
    max-width: 50px;
  }
  .default {
    padding: 6px;
    color: var(--button-default-text);
    background-color: transparent;
    box-shadow: none;
    border: none;
    transition: background-color .3s ease-in-out;
    -webkit-transition: background-color .3s ease-in-out;
    -moz-transition: background-color .3s ease-in-out;
    -o-transition: background-color .3s ease-in-out;
  }
  .default:hover {
    background-color: var(--button-default-hover);
    color:  var(--button-default-text-hover);
    cursor: pointer;
  }
  .button span {
    display: inline-block;
    vertical-align: text-top;
  }
  .button span svg g {
    fill: var(--button-icon-fill);
    transition: fill .3s ease-in-out;
    -webkit-transition: fill .3s ease-in-out;
    -moz-transition: fill .3s ease-in-out;
    -o-transition: fill .3s ease-in-out;
  }
  .previous {
    border: none;
    background: transparent;
  }
  .next {
    border: none;
    background: transparent;
  }
  .pages {
    margin: 0 10px;
    display: inline-grid;
    grid-template: var(--grid-template);
    justify-content: center;
    justify-items: center;
    align-items: center;
  }
  .pages li {
    font-size: var(--text-small);
  }
  .dotdotdot {
    padding: 4px 8px;
    color: var(--pages-text);
  }
  .nonactive {
    border-radius: var(--pages-text-border-radius);
    padding: 4px 8px;
    border: var(--pages-border);
    color: var(--pages-text);
  }
  .nonactive:hover {
    background: var(--pages-hover-background);
    cursor: pointer;
  }
  .active {
    border-radius: var(--pages-text-border-radius);
    padding: 4px 8px;
    background: var(--pages-current-background);
    color: var(--pages-text-active);
  }
  @media (max-width: 768px) {
    .pages {
      display: none;
    }
    .previous {
      justify-self: start;
    }
  }
`
