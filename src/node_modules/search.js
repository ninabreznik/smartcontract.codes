const bel = require('bel')
const csjs = require('csjs-inject')
const icon = require('icon')
const svg = require('./svg.json')
const unfocusElement = require('unfocusElement')
module.exports = search

let isExpanded = false
let searchContent = ''
let shortInfo = ''

function search (notify) {

  const searchArea = bel`<div contenteditable="true"
    placeholder='Enter a keyword, contract name or code snippet'
    class=${css.textarea}"
    onclick=${(e) => select(e)}
    onkeyup=${(e) => trigger(e)}
    onpaste=${(e) => paste(e)}
    onkeydown=${(e) => down(e)}
    onkeypress=${(e) => preventDefault(e)}>
    >
  </div>`

  unfocusElement(x => x === searchArea, (hasFocus) => {

    // console.log('[search bar]', hasFocus ? 'click inside' : 'click outside')
    if (hasFocus) return
    isExpanded = false
    if (searchArea.clientHeight > 40 ) {
      searchArea.style.overflow = 'hidden'
      searchArea.scrollTop = 0
    }
    searchArea.classList.remove(css.focus)
    searchArea.classList.add(css.ellipsis)

    if (shortInfo == '' && searchContent == '') {
      searchArea.setAttribute('placeholder', 'Enter a keyword, contract name or code snippet')
      return clearSearch()
    } else {
      searchArea.removeAttribute('placeholder')
      searchArea.innerText = shortInfo
    }
  })

  return bel`
  <div class=${css.searchBar}>
    ${searchArea}
    <button class="button ${css.submit}"
      onclick=${()=>searchContracts(searchArea, notify)}>
      <span class="${css['icon-search']}">
          ${icon('search', svg.search)}
        </span>
    </button>
  </div>`

  function select (el) {
    isExpanded = !isExpanded
    searchArea.focus()
    if (isExpanded) {
      if (!searchArea.classList.contains(css.focus)) {
        searchArea.classList.add(css.focus)
        searchArea.classList.remove(css.ellipsis)
        searchArea.style.overflowY = 'auto'
        searchArea.innerHTML = searchContent

        const range = document.createRange()
        range.selectNodeContents(el.target)
        const sel = window.getSelection()
        sel.removeAllRanges()
        sel.addRange(range)
      }
    }
  }

  function trigger (e, ops) {
    const keyCode = e.keyCode
    searchContent = searchArea.innerHTML
    shortInfo = searchArea.innerText.split('\n').shift()
    document.execCommand("defaultParagraphSeparator", false, "br")
    if (keyCode === 13 && !e.shiftKey) return searchContracts(searchArea, notify)
    // if (keyCode === 27) return clearSearch()
    // esc
    if (keyCode === 27) {
      isExpanded = false
      searchArea.classList.remove(css.focus)
      searchArea.classList.add(css.ellipsis)
      searchArea.style.overflow = 'hidden'

      if (shortInfo === '' && searchArea.textContent === '') {
          searchArea.setAttribute('placeholder', 'Enter a keyword, contract name or code snippet')
          searchContent = ''
          searchArea.blur()
          return clearSearch()
      } else {
        searchArea.removeAttribute('placeholder')
        searchArea.innerText = shortInfo
      }
      searchArea.blur()
      removeSelection()
    }
    // delete
    if (keyCode === 8 || keyCode === 46 ) {
      if (shortInfo === '' && searchArea.textContent === '') {
          searchArea.setAttribute('placeholder', 'Enter a keyword, contract name or code snippet')
          searchContent = ''
          return clearSearch()
      } else {
          searchArea.setAttribute('placeholder', '')
      }
    }
  }
  function paste(event) {
    let paste = (event.clipboardData || window.clipboardData).getData('text')
    const selection = window.getSelection()
    if (!selection.rangeCount) return false
    selection.deleteFromDocument()
    selection.getRangeAt(0).insertNode(document.createTextNode(paste))
    event.preventDefault()
    trigger()
  }
  function down(e) {
    const keyCode = e.which || e.keyCode
    // tab
    if (keyCode === 9) {
      e.preventDefault()
      document.execCommand('insertHTML', false, '&#009')
    }
  }
  function removeSelection() {
    if (window.getSelection) {
      let selection = window.getSelection()
      selection.removeAllRanges()
    }
  }

  function clearSearch () {
    shortInfo = ''
    searchContent = ''
    searchArea.innerHTML = ''
  }
}

// ===== helpers =====

function getSearchInput (searchArea) {
  return searchArea.innerText
}

function preventDefault (e) {
  const keyCode = e.keyCode
  if (keyCode === 13 && !e.shiftKey) e.preventDefault()
}

function searchContracts (searchArea, notify) {
  const query = getSearchInput(searchArea)
  return notify({ type: 'search', body: query })
}

function getMatches (contracts, val) {
  let match = []
  let formattedContracts = [...contracts]
  for(var i=0; i<contracts.length; i++) {
    let temp = formattedContracts[i].replace(/\n. |\r/g, "")
    let contract = contracts[i]
    if (temp.includes(val)) match.push(contract)
  }
  return match
}

// ===== css =====

const css = csjs`
  .noResult {
    font-size: var(--text-large);
    text-align: center;
    margin-bottom: 60px;
    font-weight: 200;
  }
  .searchBar {
    position: relative;
    display: grid;
    justify-content: end;
    align-items: start;
    padding-top: 13px;
    max-width: 620px;
  }
  .submit {
    width: 42px;
    height: 42px;
    background-color: var(--search-button-background);
    cursor: pointer;
    border-radius: 6px;
    transition: all .3s ease-in-out;
    -webkit-transition: background-color .3s ease-in-out;
    -moz-transition: background-color .3s ease-in-out;
    -o-transition: background-color .3s ease-in-out;
  }
  .submit:hover {
    color: var(--search-button-color);
    background-color: var(--search-button-hover-background);
  }
  [contenteditable=true]:empty::before {
    content: attr(placeholder);
    color: var(--placeholder);
    white-space: nowrap;
    text-overflow: ellipsis;
  }
  .textarea {
    position: absolute;
    left: 0;
    top: 13px;
    z-index: 101;
    width: calc(100% - 70px);
    max-height: 20px;
    overflow: hidden;
    font-size: var(--search-input-text);
    font-family: var(--code-font);
    line-height: var(--search-input-line-height);
    padding: 10px;
    color: var(--body-color);
    border-radius: 6px;
    border: var(--search-input);
    background: var(--search-input-background);
    white-space: pre-wrap;
    outline: none;
    transition: box-shadow .3s, height .5s, max-height .5s ease-in-out;
  }
  .icon-search {
    display: inline-block;
  }
  .icon-search svg g {
    fill: var(--card-icon-fill);
  }
  .focus {
    box-shadow: 0 6px 20px var(--search-input-shadow);
    height: auto;
    min-height: 20px;
    max-height: 250px;
  }
  .ellipsis {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    height: 20px;
  }
  .open {
    display: grid;
    visibility: visible;
    animation: on .25s ease-in forwards;
  }
  .close {
    animation: off .25s ease-out forwards
  }
  @keyframes on {
    0% {
      opacity: 0;
    }
    100% {
      opacity: 1;
    }
  }
  @keyframes off {
    0% {
      visibility: visible;
      opacity: 1;
    }
    100% {
      visibility: hidden;
      opacity: 0;
    }
  }
`
