const bel = require('bel')
const csjs = require('csjs-inject')
const icon = require('icon')
const svg = require('./svg.json')

module.exports = searchGuide

function searchGuide() {
    let filters = ["Beginner", "Basic", "OpenZeppelin", "Featured"]
    let searchFilters =  filters.map( (name, index) => {
        let el = bel`<li><a href="#" class=${css.tab} onclick=${(e) => toggle(e)}>${name}</a></li>`
        if ( index === 0 ) {
            el.firstChild.classList.add(css.active)
        }
        return el
    })
    let list = bel`<ul class=${css.filterList}>${searchFilters}</ul>`
    const arrowLeft = bel`
                    <button class="${css.button} ${css.circle} ${css['arrow-left']}" onclick=${(e) => prev()}>
                        <span class=${css['icon-arrow-left']}>${icon('arrow-left', svg.arrowLeft)}</span>
                    </button>`
    const arrowRight = bel`
                    <button class="${css.button} ${css.circle} ${css['arrow-right']}" onclick=${(e) => next()}>
                        <span class=${css['icon-arrow-right']}>${icon('arrow-left', svg.arrowRight)}</span>
                    </button>`

    let scrolled = 0
    window.onload = function() {
        showRightArrow()
    }

    window.onresize = function() {
        showRightArrow()
    }

    const tabs = bel`
    <nav class=${css.searchGuide}>
      ${arrowLeft}
      <div class=${css.searchContainer}>
        ${list}
      </div>
      ${arrowRight}
    </nav>`

    return tabs

    function toggle(e) {
        e.target.classList.toggle(css.active)
    }
    function showRightArrow() {
        let screen = document.body.clientWidth
        let listWidth = list.offsetWidth
        if (listWidth < list.parentNode.clientWidth) {
            arrowRight.style.display = 'none'
            arrowLeft.style.display = 'none'
        } else {
            arrowRight.style.display = 'block'
            if (screen <= 480) {
                arrowRight.style.display = 'none'
                arrowLeft.style.display = 'none'
            }
        }
    }
    function prev() {
        list.parentNode.scrollLeft -= list.parentNode.clientWidth
        scrolled -= document.body.clientWidth
        list.parentNode.scrollLeft = scrolled
        if (scrolled <= 0) {
            arrowLeft.style.display = 'none'
            scrolled = 0
        }
        arrowRight.style.display = 'block'

    }
    function next() {
        let maxScrollLeft = list.parentNode.scrollWidth - list.parentNode.clientWidth
        scrolled += document.body.clientWidth
        list.parentNode.scrollLeft = scrolled
        if (scrolled > 0) arrowLeft.style.display = 'block'
        if (scrolled >= maxScrollLeft) {
            arrowRight.style.display = 'none'
            scrolled = maxScrollLeft
        }
    }
}

const css = csjs`
.searchGuide {
    position: relative;
    display: grid;
    grid-template: 80px / auto;
    grid-gap: 10px;
    align-items: center;
}
.searchContainer {
    display: flex;
    height: 100%;
    overflow: hidden;
    scroll-behavior: smooth;
    -webkit-overflow-scrolling: touch;
}
.filterList {
    display: flex;
    flex-wrap: nowrap;
    align-items: center;
    -webkit-overflow-scrolling: touch;
}
.filterList li {
}
.tab {
    display: inline-block;
    margin-right:12px;
    padding:8px 34px 9px 34px;
    font-size: 14px;
    font-weight: bold;
    color: var(--tab-color);
    background-color: var(--tab-background);
    border-radius: 18px;
    border: 1px solid var(--tab-border-color);
    transform: scale(1);
    transition: color .3s, background-color .6s, transform .2s ease-in-out;
    white-space: nowrap;
}
.filterList li:lastChild .tab {
    margin-right: 0;
}
.active, .active:hover {
    color: var(--tab-active-color);
    background-color: var(--tab-active-background);
    box-shadow: 0 6px 8px var(--tab-active-box-shadow);
    transform: scale(1);
}
.button {
    width: 36px;
    height: 36px;
    background-color: white;
}
.button span {
    display: inline-block;
    vertical-align: text-top;
}
.button svg {
    width: 100%;
}
.default {
    padding: 6px;
    color: var(--button-default-text);
    background-color: transparent;
    box-shadow: none;
    border: none;
    transition: background-color .3s ease-in-out;
    -webkit-transition: background-color .3s ease-in-out;
    -moz-transition: background-color .3s ease-in-out;
    -o-transition: background-color .3s ease-in-out;
}
.default:hover {
    background-color: var(--button-default-hover);
    color:  var(--button-default-text-hover);
    cursor: pointer;
}
.default svg g {
    fill: var(--button-icon-fill);
    transition: fill .3s ease-in-out;
    -webkit-transition: fill .3s ease-in-out;
    -moz-transition: fill .3s ease-in-out;
    -o-transition: fill .3s ease-in-out;
}
.circle {
    width: 50px;
    height: 50px;
    border-radius: 50%;
}
.circle svg g {
    fill: black;
    transition: fill .3s ease-in-out;
    -webkit-transition: fill .3s ease-in-out;
    -moz-transition: fill .3s ease-in-out;
    -o-transition: fill .3s ease-in-out;
}
.arrow-left {
    display: none;
    position: absolute;
    top: 12px;
    left: -30px;
    z-index: 2;
}
.arrow-right {
    display: none;
    position: absolute;
    top: 12px;
    right: -30px;
    z-index: 2;
}
.icon-arrow-left, .icon-arrow-right {
}
@media (max-width: 768px) {
    .tab {
        padding:8px 22px 9px 22px;
        margin-right: 10px;
    }
}
@media (max-width: 480px) {
    .searchContainer {
        overflow: auto;
    }
    .button.circle {
        display: none;
    }
}
`
